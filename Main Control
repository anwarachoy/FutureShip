#include <Ethernet.h>
#include "PubSubClient.h"
#include "DHT.h"
//kennelijk  geeft update van DHT sensor library boven 1.2.1 een fout
#define CLIENT_ID       "Hal"
//#define TOPIC           "temp"
#define PUBLISH_DELAY   3000
#define PUB_TOPIC "my_username/f/temperature" //Adafruit dashboard
#define PUB_TOPIC_h "my_username/f/humidity" //Adafruit dashboard
#define DHTPIN          3
#define DHTTYPE         DHT11
#define ledPin 13
#define relayPin 8
String ip = "";
bool statusKD = HIGH;
bool statusBD = HIGH;
bool statusGD = HIGH;
bool relaystate = LOW;
bool pir = LOW;
bool startsend = HIGH;
int lichtstatus;
uint8_t mac[6] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x06};

EthernetClient ethClient;
PubSubClient mqttClient;
DHT dht(DHTPIN, DHTTYPE);

long previousMillis;
IPAddress ip_arduino(192, 168, 0, 104);

byte prop1 = 2; // Pin 2,3,4,5,6,7
byte prop2 = 3;
byte prop3 = 4;
byte prop4 = 5;
byte prop5 = 6;
byte prop6 = 7;
byte pin_pulsa_speed = 8;
byte pin_pulsa_steer = 9;
byte pin_pulsa_winch = 10;

double pulse_in_speed,pulse_in_steer,pulse_in_winch;

void setup() {
  // put your setup code here, to run once:
Serial.begin(9600);
  while (!Serial) {};
  Serial.println(F("MQTT Arduino Demo"));

  // setup ethernet communication using DHCP
  Ethernet.begin(mac,ip_arduino); 

  ip = String (Ethernet.localIP()[0]);
  ip = ip + ".";
  ip = ip + String (Ethernet.localIP()[1]);
  ip = ip + ".";
  ip = ip + String (Ethernet.localIP()[2]);
  ip = ip + ".";
  ip = ip + String (Ethernet.localIP()[3]);

    // setup mqtt client
  mqttClient.setClient(ethClient);
  //mqttClient.setServer(mqttServer, 1883);
  // mqttClient.setServer("test.mosquitto.org", 1883);
  mqttClient.setServer( "192.618.0.100", 1883);
  //Serial.println(F("MQTT client configured"));
  mqttClient.setCallback(callback);
  // setup DHT sensor
  dht.begin();
  Serial.println(F("DHT sensor initialized"));

  Serial.println();
  Serial.println(F("Ready to send data"));
  previousMillis = millis();
  mqttClient.publish("home/br/nb/ip", ip.c_str());
  
pinMode(prop1,HIGH);
pinMode(prop2,HIGH);
pinMode(prop3,HIGH);
pinMode(prop4,HIGH);
pinMode(prop5,HIGH);
pinMode(prop6,HIGH);

pinMode(pin_pulsa_speed,INPUT);
pinMode(pin_pulsa_steer,INPUT);
pinMode(pin_pulsa_winch,INPUT);
}

void loop() {
  // put your main code here, to run repeatedly:
  Serial.println(pulseIn(pin_pulsa_winch,HIGH));

  // it's time to send new data?
  if (millis() - previousMillis > PUBLISH_DELAY) {
    sendData();
    previousMillis = millis();

  }

  mqttClient.loop();
}

void sendData() {

  char msgBuffer[20];
  pulse_in_speed = pulseIn(pin_pulsa_speed,HIGH);
  pulse_in_steer = pulseIn(pin_pulsa_steer,HIGH);
  pulse_in_winch = pulseIn(pin_pulsa_winch,HIGH);
   
  if (mqttClient.connect(CLIENT_ID)) {
    mqttClient.publish("PWM_SPEED", dtostrf(pulse_in_speed, 6, 2, msgBuffer));
    mqttClient.publish("STEER_DEGREE", dtostrf(pulse_in_steer, 6, 2, msgBuffer));
    mqttClient.publish("WINCH", dtostrf(pulse_in_winch, 6, 2, msgBuffer));
    mqttClient.subscribe("home/br/sb");
    if (startsend) {
     // mqttClient.publish("home/br/nb/relay", (relaystate == LOW) ? "OPEN" : "CLOSED");
      mqttClient.publish("home/br/nb/ip", ip.c_str());
      startsend = LOW;
    }
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
  char msgBuffer[20];
  // I am only using one ascii character as command, so do not need to take an entire word as payload
  // However, if you want to send full word commands, uncomment the next line and use for string comparison
   //payload[length] = '\0';            // terminate string with '0'
  //String strPayload = String((char*)payload);  // convert to string
  // Serial.println(strPayload); //can use this if using longer southbound topics
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");//MQTT_BROKER
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
  Serial.println(payload[0]);

  // Examine only the first character of the message
  if (payload[0] == 49)             // Message "1" in ASCII (turn output ON)
  {
    digitalWrite(LED_BUILTIN, HIGH);    //
    digitalWrite(relayPin, HIGH);
  } else if (payload[0] == 48)      // Message "0" in ASCII (turn output OFF)
  {
    digitalWrite(relayPin, LOW);     //
    digitalWrite(LED_BUILTIN, LOW);
  } else if (payload[0] == 50)
  {
    mqttClient.publish("home/br/nb/ip", ip.c_str());// publish IP nr
  } else {
    Serial.println("Unknown value");
    mqttClient.publish("home/br/nb", "Syntax Error");
  }

}
