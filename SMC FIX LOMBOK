/* Main Control - Remote */
/* Mochamad Teguh Subarkah */

/* Library ethernet */
#include <SPI.h>
#include <Ethernet.h>
#include <PubSubClient.h>

/* Declare IP Address */
byte mac[]    = {  0xDA, 0xED, 0xBA, 0xFE, 0xFE, 0xED };
IPAddress ip(123, 45, 0, 9);
IPAddress server(123, 45, 0, 10);

void callback(char* topic, byte* payload, unsigned int length) {
  char masuk[100];
//  char Steer[100];
  char Winch[100];
  String Speed;
  float speed_out;
  String Steer;
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i=0;i<length;i++) {
    masuk[i] = (char)payload[i];
    Serial.print((char)payload[i]);
  }
  Speed = String(String(masuk[0]) + String(masuk[1]) + String(masuk[2]) + String(masuk[3]) );
  Steer = String(String(masuk[5]) + String(masuk[6]) + String(masuk[7]) + String(masuk[8]) );
  //String str(masuk[10]);
  Serial.println();
  Serial.print("Masuk : ");
  speed_out = (Speed.toInt())+1000;
  Serial.print(speed_out);
  Serial.print(",");
  Serial.print((Steer.toInt()));
  Serial.println();
  /*if (speed_out == 1000){
   client.publish("outTopik","hello gigs");
  }(*/
}

EthernetClient ethClient;
PubSubClient client(ethClient);

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect("arduinoClient")) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      //client.publish("outTopic","hello world");
      // ... and resubscribe
      //client.subscribe("outTopic");
      //client.subscribe("test2");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}


#define prop1 4
#define prop2 5
#define prop3 6
#define prop4 7
#define speed_in 8
#define steer_in 9
#define winch_in 12 

double pulse_speed_in,pulse_steer_in,pulse_winch_in;

void setup() {
  //Serial begin
  Serial.begin(57600);

  //Ethernet
  client.setServer(server, 1883);
  Ethernet.begin(mac, ip);
  client.setCallback(callback);  
  // Pin Mode propeller w/ pullupresistor
  pinMode(prop1, INPUT);
  pinMode(prop2, INPUT);
  pinMode(prop3, INPUT);
  pinMode(prop4, INPUT);
  pinMode(speed_in, INPUT);
  pinMode(steer_in, INPUT);
  pinMode(winch_in, INPUT);
  
  digitalWrite(prop1, HIGH);
  digitalWrite(prop2, HIGH);
  digitalWrite(prop3, HIGH);
  digitalWrite(prop4, HIGH);

  delay(1500);
}
char msgBuffer[20];
void loop() {

//   if (!client.connected()) {
//    reconnect();
//  }
  
    /* Receive Pulse from APM */
   //pulse_speed_in = pulseIn(speed_in,HIGH);
   pulse_speed_in = analogRead(A0);
   analogWrite(9,255);
   Serial.print("Pulse Speed In = ");
   Serial.println(pulse_speed_in);
   
   Serial.print("Prop 1 = ");
   Serial.println(not(digitalRead(prop4)));
   Serial.print("Prop 2 = ");
   Serial.println(not(digitalRead(prop3)));
   /*Serial.print("Prop 3 = ");
   Serial.println(not(digitalRead(prop3)));
   Serial.print("Prop 4 = ");
   Serial.println(not(digitalRead(prop4)));*/

   if (((not(digitalRead(prop4))) == 1) && ((not(digitalRead(prop3))) == 0)){
   Serial.println("Publishing SPC 1");
   client.publish("test",dtostrf(pulse_speed_in, 10, 2, msgBuffer));
   }
   else if (((not(digitalRead(prop4))) == 0) && ((not(digitalRead(prop3))) == 1)){
   Serial.println("Publishing SPC 2");
   client.publish("test",dtostrf(pulse_speed_in, 10, 2, msgBuffer));
   }
   else if (((not(digitalRead(prop4))) == 1) && ((not(digitalRead(prop3))) == 1)){
   Serial.println("Not Publishing ");
   }
   else if (((not(digitalRead(prop4))) == 0) && ((not(digitalRead(prop3))) == 0)){
   Serial.println("Not Publishing ");
   }
   client.loop();
   delay(10); 


}
